
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.sistemasoperativos.pcvirtual.compilador;

import java_cup.runtime.*;
import com.sistemasoperativos.pcvirtual.componentes.Conversor;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\004\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\004\000\002\010\003\000\002\010" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\044\003\026\006\024\007\030\010\022\011" +
    "\021\012\013\013\016\014\023\015\032\016\006\017\012" +
    "\020\017\021\027\022\004\023\031\024\020\025\014\001" +
    "\002\000\014\026\037\027\040\030\034\031\035\032\036" +
    "\001\002\000\006\002\000\004\076\001\002\000\010\033" +
    "\062\034\061\035\056\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\006\002\uffff\004\uffff\001\002\000\004\002" +
    "\074\001\002\000\014\026\037\027\040\030\034\031\035" +
    "\032\036\001\002\000\014\026\037\027\040\030\034\031" +
    "\035\032\036\001\002\000\014\026\037\027\040\030\034" +
    "\031\035\032\036\001\002\000\006\002\ufffb\004\ufffb\001" +
    "\002\000\020\002\uffea\004\uffea\026\037\027\040\030\034" +
    "\031\035\032\036\001\002\000\014\026\037\027\040\030" +
    "\034\031\035\032\036\001\002\000\014\026\037\027\040" +
    "\030\034\031\035\032\036\001\002\000\014\026\037\027" +
    "\040\030\034\031\035\032\036\001\002\000\014\026\037" +
    "\027\040\030\034\031\035\032\036\001\002\000\020\002" +
    "\uffe9\004\uffe9\026\037\027\040\030\034\031\035\032\036" +
    "\001\002\000\014\026\037\027\040\030\034\031\035\032" +
    "\036\001\002\000\006\002\ufffd\004\ufffd\001\002\000\006" +
    "\002\ufffa\004\ufffa\001\002\000\014\026\037\027\040\030" +
    "\034\031\035\032\036\001\002\000\014\026\037\027\040" +
    "\030\034\031\035\032\036\001\002\000\004\036\043\001" +
    "\002\000\014\026\037\027\040\030\034\031\035\032\036" +
    "\001\002\000\004\005\041\001\002\000\010\002\uffe2\004" +
    "\uffe2\005\uffe2\001\002\000\010\002\uffe1\004\uffe1\005\uffe1" +
    "\001\002\000\010\002\uffe0\004\uffe0\005\uffe0\001\002\000" +
    "\010\002\uffe4\004\uffe4\005\uffe4\001\002\000\010\002\uffe3" +
    "\004\uffe3\005\uffe3\001\002\000\014\026\037\027\040\030" +
    "\034\031\035\032\036\001\002\000\006\002\uffed\004\uffed" +
    "\001\002\000\010\002\uffdc\004\uffdc\005\uffdc\001\002\000" +
    "\010\002\uffe6\004\uffe6\005\046\001\002\000\006\002\uffeb" +
    "\004\uffeb\001\002\000\004\036\043\001\002\000\006\002" +
    "\uffe5\004\uffe5\001\002\000\006\002\ufff8\004\ufff8\001\002" +
    "\000\006\002\ufff4\004\ufff4\001\002\000\006\002\ufff9\004" +
    "\ufff9\001\002\000\006\002\uffe7\004\uffe7\001\002\000\004" +
    "\005\055\001\002\000\022\026\037\027\040\030\034\031" +
    "\035\032\036\033\062\034\061\035\056\001\002\000\006" +
    "\002\uffdd\004\uffdd\001\002\000\006\002\uffef\004\uffef\001" +
    "\002\000\006\002\uffee\004\uffee\001\002\000\006\002\uffde" +
    "\004\uffde\001\002\000\006\002\uffdf\004\uffdf\001\002\000" +
    "\006\002\ufff7\004\ufff7\001\002\000\006\002\ufff2\004\ufff2" +
    "\001\002\000\004\005\066\001\002\000\014\026\037\027" +
    "\040\030\034\031\035\032\036\001\002\000\006\002\uffec" +
    "\004\uffec\001\002\000\006\002\uffe8\004\uffe8\001\002\000" +
    "\006\002\ufff1\004\ufff1\001\002\000\006\002\ufff6\004\ufff6" +
    "\001\002\000\006\002\ufff5\004\ufff5\001\002\000\004\002" +
    "\001\001\002\000\006\002\ufff0\004\ufff0\001\002\000\044" +
    "\003\026\006\024\007\030\010\022\011\021\012\013\013" +
    "\016\014\023\015\032\016\006\017\012\020\017\021\027" +
    "\022\004\023\031\024\020\025\014\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002\000\006\002\ufff3\004\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\016\002\010\003\004\004\007\005\024\006" +
    "\006\007\014\001\001\000\004\011\077\001\001\000\002" +
    "\001\001\000\004\012\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\072\001\001" +
    "\000\004\011\071\001\001\000\004\011\070\001\001\000" +
    "\002\001\001\000\004\011\067\001\001\000\004\011\064" +
    "\001\001\000\004\011\063\001\001\000\004\011\062\001" +
    "\001\000\004\011\053\001\001\000\004\011\052\001\001" +
    "\000\004\011\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\050\001\001\000\004\011\047\001\001" +
    "\000\006\010\044\013\043\001\001\000\004\011\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\046\013" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\056\012\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\076\005\024\006\006\007\014\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Conversor ConversorAsignado = new Conversor();
    private ArrayList<String> instruccionesBinarias = new ArrayList<>();
    private boolean Error;
    private String MessageError;

    public ArrayList<String> getInstruccionesBinarias() {
        return instruccionesBinarias;
    }

    /**
     * Maneja errores sintácticos encontrados por el parser
     * @param s símbolo donde ocurrió el error
     */
    public void syntax_error(Symbol s) {
        Error = true;
        if (s != null) {
            MessageError = ("Error sintáctico en la línea " + (s.left + 1) +
            ", columna " + (s.right + 1) + ": " + s.value);
        } else {
            MessageError = ("Error sintáctico: símbolo nulo");
        }
    }


    public void parsarCodigo() throws Exception{
        Error = false;
        parse();
    }

    public boolean VerificarSiHayError(){
        return Error;
    }

    public String ObtenerMensajeError(){
        return MessageError;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= bloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloqueInstrucciones ::= instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloqueInstrucciones ::= bloqueInstrucciones SEPARATOR instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueInstrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= instruccionUnArgumento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= instruccionDosArgumentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= instruccionCeroArgumentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccionUnArgumento ::= LOAD argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00000" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccionUnArgumento ::= STORE argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00001" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccionUnArgumento ::= ADD argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00011" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccionUnArgumento ::= SUB argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00100" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccionUnArgumento ::= JMP argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01001" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccionUnArgumento ::= JE argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01011" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccionUnArgumento ::= JNE argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01100" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccionUnArgumento ::= PUSH argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01110" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccionUnArgumento ::= POP argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01111" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccionUnArgumento ::= INT argumentoInt 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01000" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionUnArgumento",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccionDosArgumentos ::= MOV argumento COMMA argumento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00010" + a + b;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionDosArgumentos",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccionDosArgumentos ::= MOV argumento COMMA argumentoInt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00010" + a + b;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionDosArgumentos",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccionDosArgumentos ::= SWAP argumento COMMA argumento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00111" + a + b;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionDosArgumentos",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccionDosArgumentos ::= CMP argumento COMMA argumento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01010" + a + b;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionDosArgumentos",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccionDosArgumentos ::= PARAM argumentos 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "01101" + args;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionDosArgumentos",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccionCeroArgumentos ::= INC 
            {
              Object RESULT =null;
		
    String bin = "00101";
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionCeroArgumentos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccionCeroArgumentos ::= DEC 
            {
              Object RESULT =null;
		
    String bin = "00110";
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionCeroArgumentos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccionCeroArgumentos ::= INC argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00101" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionCeroArgumentos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccionCeroArgumentos ::= DEC argumento 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String bin = "00110" + arg;
    instruccionesBinarias.add(bin);
    RESULT = bin;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionCeroArgumentos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argumentos ::= argumentoNumero 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = arg;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argumentos ::= argumentoNumero COMMA argumentos 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = arg.toString() + args.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argumento ::= AX 
            {
              Object RESULT =null;
		
    RESULT = "00011";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argumento ::= BX 
            {
              Object RESULT =null;
		
    RESULT = "00100";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // argumento ::= CX 
            {
              Object RESULT =null;
		
    RESULT = "00101";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // argumento ::= DX 
            {
              Object RESULT =null;
		
    RESULT = "00110";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // argumento ::= AC 
            {
              Object RESULT =null;
		
    RESULT = "00001";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumento",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // argumentoInt ::= INT20H 
            {
              Object RESULT =null;
		
    RESULT = "00000";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentoInt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // argumentoInt ::= INT10H 
            {
              Object RESULT =null;
		
    RESULT = "00001";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentoInt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argumentoInt ::= INT09H 
            {
              Object RESULT =null;
		
    RESULT = "00010";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentoInt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // argumentoNumero ::= INT_LITERAL 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = ConversorAsignado.ConvertirIntegerABits(Integer.getInteger(numero));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentoNumero",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
